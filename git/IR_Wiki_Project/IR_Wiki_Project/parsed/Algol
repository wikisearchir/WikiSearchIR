title{{about}}
{{Infobox programming language}}
ALGOL (short for ALGOrithmic Language)The name of the family is sometimes given in mixed case (Algol 60), and sometimes in all uppercase (ALGOL 68). For simplicity this article uses ALGOL. is a family of imperative computer programming languages originally developed in the mid 1950s which greatly influenced many other languages and became the de facto way algorithms were described in textbooks and academic works for almost the next 30 years.{{Citation needed}}cf. Pseudocode It was designed to avoid some of the perceived problems with FORTRAN and eventually gave rise to many other programming languages, including BCPL, B, Pascal, Simula, and C. ALGOL introduced code blocks and the begin and end pairs for delimiting them and it was also the first language implementing nested function definitions with lexical scope. Fragments of ALGOL-like syntax are sometimes still used as pseudocode.There were three major specifications:

ALGOL 58 - originally proposed to be called IAL (for International Algorithmic Language).
ALGOL 60 - first implemented as X1 ALGOL 60 in mid 1960 - revised 1963{{cite book}}{{cite web}}
ALGOL 68 - revised 1973{{cite web}} - introduced new elements including flexible arrays, slices, parallelism, operator identification, and various extensibility features.

Niklaus Wirth based his own ALGOL W on ALGOL 60 before developing Pascal. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.Algol 68 is substantially different from Algol 60 but was not well received, so that in general "Algol" means Algol 60 and dialects thereof.
Important implementationsThe International Algorithmic Language (IAL) was extremely influential and generally considered the ancestor of most of the modern programming languages (the so-called Algol-like languages). Additionally, in computer science, ALGOL object code was a simple and compact and stack-based instruction set architecture mainly used in teaching compiler construction and other high order language (of which Algol is generally considered the first).
HistoryALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at ETH Zurich (cf. ALGOL 58). It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.ALGOL was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus–Naur Form.Knuth, Donald E. (1964) Backus Normal Form vs Backus Naur Form. Communications of the ACM 7(12):735-736Peter Naur: "As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960."ACM Award Citation / Peter Naur, 2005The following people attended the meeting in Paris (from January 1 to 16):

Friedrich L. Bauer, Peter Naur, Heinz Rutishauser, Klaus Samelson, Bernard Vauquois, Adriaan van Wijngaarden, and Michael Woodger (from Europe)
John W. Backus, Julien Green, Charles Katz, John McCarthy, Alan J. Perlis, and Joseph Henry Wegstein (from the USA).
Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent."Both John Backus and Peter Naur served on the committee which created ALGOL 60 as did Wally Feurzeig,{{Citation needed}} who later created Logo.ALGOL 60 inspired many languages that followed it. C. A. R. Hoare remarked: "Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.""Hints on Programming Language Design", C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to Edsger W. Dijkstra, also involved in implementing the first ALGOL 60 compiler.)  The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording "Revised Report on the Algorithmic Language Scheme" for its standards documents in homage to ALGOL.{{cite web}}
Algol and programming language researchAs Peter Landin noted, the language Algol was the first language to seamlessly combine imperative effects with the (call-by-name) lambda calculus. Perhaps the most elegant formulation of the language is due to John C. Reynolds, and it best exhibits its syntactic and semantic purity. Reynolds's "idealized" Algol also made a convincing methodological argument regarding the suitability of "local" effects in the context of call-by-name languages, to be contrasted with the "global" effects used by call-by-value languages such as ML. The conceptual integrity of the language made it one of the main objects of semantic research, along with PCF and ML.Peter O'Hearn and Robert D. Tennent. 1996. Algol-Like Languages. Birkhauser Boston Inc., Cambridge, MA, USA.
IAL implementations timelineTo date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.The Encyclopedia of Computer LanguagesA discussion of implementation issues of an ALGOL 60 implementations can be found in the article "The early days of Algol" by Nicholas Enticknap and Pat Woodroffe.

Name Year Author State Description Target CPU 
ZMMD-implementation 1958  Friedrich L. Bauer, Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch  Germany  implementation of ALGOL 58  Z22  (later Zuse&#39;s Z23 was delivered with an Algol 60 compiler) Computer Museum History, Historical Zuse-Computer Z23, restored by the Konrad Zuse Schule in Hünfeld, for the Computer Museum History Center in Mountain View (California) USA 
X1 ALGOL 60  August 1960{{cite journal}}  Edsger W. Dijkstra and Jaap A. Zonneveld  Netherlands  First implementation of ALGOL 60{{Cite book}}  Electrologica X1 
Elliott ALGOL 1960s  C. A. R. Hoare  UK  Subject of the famous Turing lecture Elliott 803 &#38; the Elliott 503 
JOVIAL 1960  Jules Schwarz  USA  Was the DOD HOL prior to Ada (programming language)  Various (see article) 
Burroughs Algol  (Several variants) 1961  Burroughs Corporation (with participation by Hoare, Dijkstra, and others)  USA  Basis of the Burroughs (and now Unisys MCP based) computers  Burroughs large systems and their midrange as well. 
Case ALGOL 1961   USA  Simula was originally contracted as a simulation extension of the Case ALGOL  UNIVAC 1107 
GOGOL 1961  Bill McKeeman  USA  For ODIN time-sharing system  PDP-1 
RegneCentralen ALGOL 1961  Peter Naur, Jørn Jensen  Denmark  Inplementation of full Algol 60  DASK at Regnecentralen 
Dartmouth ALGOL 30 1962  Thomas Eugene Kurtz et al.  USA   LGP-30 
USS 90 Algol 1962  L. Petrone   Italy   
Algol Translator  1962  G. van der Mey and W.L. van der Poel  Netherlands  Staatsbedrijf der Posterijen, Telegrafie en Telefonie  ZEBRA 
Kidsgrove Algol 1963  F. G. Duncan   UK   English Electric Company KDF9 
VALGOL 1963  Val Schorre  USA  A test of the META II compiler compiler 
Whetstone 1964  Brian Randell and L J Russell  UK  Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus, National Physical Laboratories ACE and English Electric DEUCE implementations.  English Electric Company KDF9 
NU ALGOL 1965   Norway   UNIVAC 
ALGEK 1965   USSR  Minsk-22  ?????, based on ALGOL-60 and COBOL support, for economical tasks 
MALGOL 1966  publ. A. Viil, M Kotli &#38; M. Rakhendi,  Estonian SSR  Minsk-22 
ALGAMS 1967  GAMS group (????, ?????? ????????????? ???????????????? ??? ????? ???????? ??????), cooperation of Comecon Academies of Science  Comecon  Minsk-22, later ES EVM, BESM 
ALGOL/ZAM 1967   Poland   Polish ZAM computer 
Simula 67 1967  Ole-Johan Dahl and Kristen Nygaard  Norway  Algol 60 with classes  UNIVAC 1107 
Chinese Algol 1972   China  Chinese characters, expressed via the Symbol system 
DG/L 1972   USA   DG Eclipse family of  Computers 
S-algol 1979  Prof. Ron Morrison  UK  Addition of orthogonal datatypes with intended use as a teaching language  PDP-11 with a subsequent implementation on the Java VM 
The Burroughs dialects included special Bootstrapping dialects such as ESPOL and NEWP.
PropertiesALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for Input/Output) facilities.ALGOL 60 allowed for two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. Call-by-name had certain limitations in contrast to call-by-reference, making it an undesirable feature in imperative language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.{{cite book}}, Section 7.5, and references therein Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap() is referenced, it's reevaluated. Say i := 1 and A[i] := 2, so every time swap() is referenced it'll return the other combination of the values ([1,2], [2,1], [1,2] and so on). Another problematic situation is passing a random() function.However, call-by-name is still beloved of ALGOL implementors for the interesting "thunks" that are used to implement it. Donald Knuth devised the "man or boy test" to separate compilers that correctly implemented "recursion and non-local references." This test contains an example of call-by-name.ALGOL 68 was defined using a two-level grammar formalism invented by Adriaan van Wijngaarden and which bears his name. Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled "semantics" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.
Examples and portability issues
Code sample comparisons
ALGOL 60(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for integer; this is known as stropping.)procedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
    value n, m; array a; integer n, m, i, k; real y;
comment The absolute greatest element of the matrix a, of size n by m
is transferred to y, and the subscripts of this element to i and k;
begin integer p, q;
    y := 0; i := k := 1;
    for p:=1 step 1 until n do
    for q:=1 step 1 until m do
        if abs(a[p, q]) > y then
            begin y := abs(a[p, q]);
            i := p; k := q
            end
end AbsmaxHere's an example of how to produce a table using Elliott 803 ALGOL."803 ALGOL", the manual for Elliott 803 ALGOL FLOATING POINT ALGOL TEST'
 BEGIN REAL A,B,C,D'
 &nbsp;
 READ D'
 &nbsp;
 FOR A:= 0.0 STEP D UNTIL 6.3 DO
 BEGIN
   PRINT PUNCH(3),££L??'
   B := SIN(A)'
   C := COS(A)'
   PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'
 END'
 END'PUNCH(3) sends output to the teleprinter rather than the tape punch.
SAMELINE suppresses the carriage return + line feed normally printed between arguments.
ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point.
ALGOL 68The following code samples are ALGOL 68 versions of the above ALGOL 60 code samples.ALGOL 68 reuses ALGOL 60's stropping. In ALGOL 68's case tokens with the bold typeface are reserved words, types (modes) or operators.proc abs max = ([,]real a, ref real y, ref int i, k)real:
comment The absolute greatest element of the matrix a, of size ?a by 2?a
is transferred to y, and the subscripts of this element to i and k; comment
begin
   real y := 0; i := ?a; k := 2?a;
   for p from ?a to ?a do
     for q from 2?a to 2?a do
       if abs a[p, q] > y then
           y := abs a[p, q];
           i := p; k := q
       fi
     od
   od;
   y
end # abs max #Note: lower (?) and upper (?) bounds of an array, and array slicing, are directly available to the programmer.floating point algol68 test:
(
  real a,b,c,d;
  &nbsp;
  printf(($pg$,"Enter d:"));
  read(d);
  &nbsp;
  for step from 0 while a:=step*d; a <= 2*pi do
    printf($l$);
    b := sin(a);
    c := cos(a);
    printf(($z-d.6d$,a,b,c))
  od
printf - sends output to the file stand out.
printf($p$); - selects a new page.
printf($l$); - selects a new line.
printf(($z-d.6d$,a,b,c)) - formats output with 1 digit before and 6 after the decimal point.
Timeline: Hello worldThe variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic hello world program.
ALGOL 58 (IAL){{main}}
ALGOL 58 had no I/O facilities.
ALGOL 60 family{{main}}
Since ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL.  The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide at the University of Michigan-Dearborn Computer and Information
Science Department Hello world! ALGOL Example Program page.BEGIN
  FILE F(KIND=REMOTE);
  EBCDIC ARRAY E[0:11];
  REPLACE E BY "HELLO WORLD!";
  WRITE(F, *, E);
END.A simpler program using an inline format:BEGIN
  FILE F(KIND=REMOTE);
  WRITE(F, <"HELLO WORLD!">);
END.An even simpler program using the Display statement:BEGIN DISPLAY("HELLO WORLD!") END.An alternative example, using Elliott Algol I/O is as follows.  Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by ‘ and ’. program HiFolks;
 begin
    print ‘Hello world’;
 endHere's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case.  The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote.  Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter).  HIFOLKS'
  BEGIN
     PRINT £HELLO WORLD£L??'
  END'The ICT 1900 series Algol I/O version allowed input from paper tape or punched card.  Paper tape 'full' mode allowed lower case.  Output was to a line printer.  'BEGIN'
     'WRITE TEXT'("HELLO WORLD");
  'END'

ALGOL 68{{main}}ALGOL 68 code was published with reserved words typically in lowercase, but bolded or underlined.begin
  printf(($gl$,"Hello, world!"))
endIn the language of the "Algol 68 Report" the input/output facilities were collectively called the "Transput".
Timeline of ALGOL special characters{{SpecialChars}}
The ALGOLs were conceived at a time when character sets were diverse and evolving rapidly; also, the ALGOLs were defined so that only uppercase letters were required.1960: IFIP - The Algol 60 language and report included several mathematical symbols which are available on modern computers and operating systems, but, unfortunately, were not supported on most computing systems at the time. For instance: ×, ÷, ?, ?, ?, ¬, ?, ?, ?, ?, ? and ?.1961 September: ASCII&nbsp;– The ASCII character set, then in an early stage of development, had the \ (Back slash) character added to it in order to support ALGOL's boolean operators /\ and \/.How ASCII Got Its Backslash, Bob Bemer1962: ALCOR - This character set included the unusual "&#x16ed;"  (iron/runic cross) character and the "?" (Decimal Exponent Symbol) for floating point notation.  
{{cite journal}}1964: GOST - The 1964 Russian standard GOST 10859 allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.{{cite web}}1968: The "Algol 68 Report" - used existing ALGOL characters, and further adopted ?, ?, ?, ?, ?, ?, ?, ?, ?, ? and ¢ characters which can be found on the IBM 2741 keyboard with "golf-ball" print heads inserted (such as the APL golfball), these became available in the mid 1960s while ALGOL 68 was being drafted.  The report was translated into Russian, German, French and Bulgarian, and allowed programming in languages with larger character sets, e.g. Cyrillic alphabet of the Russian BESM-4. All ALGOL's characters are also part of the unicode standard and most of them are available in several popular fonts.2009 October: Unicode - The "?" (Decimal Exponent Symbol) for floating point notation was added to Unicode 5.2  for backward compatibility with historic Buran (spacecraft) ALGOL software.
See also{{col-begin}}
{{col-2}}

Address programming language
Atlas Autocode
Coral 66
Edinburgh IMP
Jensen's Device
ISWIM
{{col-2}}

JOVIAL
Tron (video game)
NELIAC
Simula
S-algol
Scheme (programming language)
{{col-end}}
References{{Reflist}}
Further reading

F.L. Bauer, R. Baumann, M. Feliciano, K. Samelson, Introduction to Algol. Prentice Hall, 1964,  ISBN 0-134-77828-6
B. Randell and L.J. Russell, ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer. Academic Press, 1964. The design of the Whetstone Compiler. One of the early published descriptions of implementing a compiler. See the related papers: Whetstone Algol Revisited, and The Whetstone KDF9 Algol Translator by B. Randell
E. W, Dijkstra, Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60, report MR 35/61. Mathematisch Centrum, Amsterdam, 1961. http://www.cs.utexas.edu/users/EWD/MCReps/MR35.PDF


External links

Revised Report on the Algorithmic Language Algol 60 by Peter Naur, et al. ALGOL definition
A BNF syntax summary of ALGOL 60
History of ALGOL at the Computer History Museum
MARST, a free Algol-to-C translator (User Guide)
AN IMPLEMENTATION OF ALGOL 60 FOR THE FP6000 Discussion of some implementation issues.
"The European Side of the Last Phase of the Development of ALGOL 60" by Peter Naur
Edinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the BNF for Algol60 and the ICL2900 compiler source, library documentation, and a considerable test suite including Brian Wichmann's tests. Also there is a rather superficial Algol60 to Atlas Autocode source-level translator.
A Windows Algol Algol running on Vista win64 system by Marcel van der Veer, Algol 68 Genie works on normal Windows up through the latest.
Eric S. Raymond&#39;s Retrocomputing Museum, among others a link to the NASE Algol-60 interpreter written in C.
Stories about Burrough&#39;s B5000 http://ed-thelen.org/comp-hist/B5000-AlgolRWaychoff.html
TrueType font containing U+23E8 Decimal Exponent Symbol.

{{DEFAULTSORT:Algol}}





az:Algol dili
bs:ALGOL
bg:ALGOL
ca:ALGOL
cs:ALGOL
da:ALGOL
de:ALGOL
el:ALGOL
es:ALGOL
fa:?????
fr:Algol (langage)
gl:Algol
ko:?? (????? ??)
it:ALGOL
he:ALGOL
kk:?????
hu:ALGOL
ms:ALGOL
nl:Algol (programmeertaal)
ja:ALGOL
no:ALGOL (programmeringsspråk)
nn:ALGOL
pl:Algol (j?zyk programowania)
pt:ALGOL
ru:?????
sk:ALGOL
sr:?????
sh:ALGOL
fi:ALGOL
sv:Algol (programspråk)
tg:?????
tr:ALGOL
uk:?????
zh:ALGOL